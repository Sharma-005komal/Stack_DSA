/**************************Queue implementation using arrays******************************/

#include <bits/stdc++.h>
using namespace std;

class Queue
{
    int* a;
    int start, end, currsize, maxsize;
    public:
        Queue()
        {
            a = new int[16];
            start = -1;
            end = -1;
            currsize = 0;
        }
        
        Queue(int maxsize)
        {
            (*this).maxsize = maxsize;
            a = new int[maxsize];
            start = -1;
            end = -1;
            currsize = 0;
        }
        
        void push(int x)
        {
            if(currsize == maxsize)
            {
                cout<<"Queue is fulled"<<endl;
                exit(1);
            }
            if(end == -1)
            {
                start = 0;
                end = 0;
            }
            else 
            {
                end = (end+1)%maxsize;
            }
            a[end] = x;
            cout<<"The element pushed is"<<" "<<x<<endl;
            currsize++;
        }
        
        int pop()
        {
            if(start == -1)
            {
                cout<<"Queue is empty"<<endl;
                exit(1);
            }
            int popped = a[start];
            if(currsize == 1)
            {
                start = -1;
                end = -1;
            }
            else 
            {
                start = (start+1)%maxsize;
            }
            currsize--;
            return popped;
        }
        
        int size()
        {
            return currsize;
        }
        
        int top()
        {
            if(start == -1)
            {
                cout<<"Queue is empty"<<endl;
                exit(1);
            }
            return a[start];
        }
};

int main()
{
    Queue q(6);
    q.push(4);
    q.push(14);
    q.push(24);
    q.push(34);
    
    cout<<"Peak of queue before deletion"<<" "<<q.top()<<endl;
    cout<<"Size before deletion"<<" "<<q.size()<<endl;
    cout<<"First element to be deleted"<<" "<<q.pop()<<endl;
    cout<<"Peak of queue after deletion"<<" "<<q.top()<<endl;
    cout<<"Size after deletion"<<" "<<q.size()<<endl;

    return 0;
}
