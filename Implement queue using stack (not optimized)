/*************************Implement stack using queue (Not optimized approach)********************************/

#include <bits/stdc++.h>
using namespace std;

struct Queue
{
    stack<int> input, output;
    public:
        //Push new element
        void push(int x)
        {
            //Put all elements from input to output
            while(!input.empty())
            {
                output.push(input.top());
                input.pop();
            }
            
            //Insert desired element in input
            cout<<"The element pushed is"<<" "<<x<<endl;
            input.push(x);
            
            //Pop all elements from output to input
            while(!output.empty())
            {
                input.push(output.top());
                output.pop();
            }
        }
        
        //Pop element from queue
        int pop()
        {
            if(input.empty())
            {
                cout<<"Stack is empty"<<" "<<endl;
                exit(0);
            }
            int value = input.top();
            input.pop();
            return value;
        }
        
        //Return topmost element from queue
        int Top()
        {
            if(input.empty())
            {
                cout<<"Stack is empty"<<" "<<endl;
                exit(0);
            }
            return input.top();
        }
        
        //Return the size of queue
        int size()
        {
            return input.size();
        }
};

int main()
{
    Queue q;
    q.push(3);
    q.push(4);
    
    cout<<"The element poped"<<" "<<q.pop()<<endl;
    
    q.push(5);
    
    cout<<"The top of the queue"<<" "<<q.Top()<<endl;

    cout<<"The size of the queue"<<" "<<q.size()<<endl;
    return 0;
}
